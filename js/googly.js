// Generated by CoffeeScript 1.4.0
(function() {
  var $, Eye, Storage, Trash, trash,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  $ = jQuery;

  /* Create Trash
  */


  Trash = (function() {

    function Trash() {}

    Trash.prototype.draw = function() {
      var t;
      t = $("<div class='trash'>");
      t.html("This is the trash").hide().prependTo("body");
      return this.element = t;
    };

    Trash.prototype.show = function() {
      return this.element.slideDown("fast");
    };

    Trash.prototype.hide = function() {
      return this.element.slideUp();
    };

    Trash.prototype.borders = function() {
      var bottom, left, right, top, _ref, _ref1;
      _ref = this.element.position(), top = _ref.top, left = _ref.left;
      _ref1 = [top + this.element.height(), left + this.element.width()], bottom = _ref1[0], right = _ref1[1];
      return {
        "top": top,
        "left": left,
        "bottom": bottom,
        "right": right
      };
    };

    Trash.prototype["delete"] = function() {};

    return Trash;

  })();

  trash = new Trash;

  /* Create Eyeball
  */


  Eye = (function() {

    function Eye(parent) {
      var p, that;
      this.parent = parent;
      this.pupil = __bind(this.pupil, this);

      this.position = __bind(this.position, this);

      this.size = __bind(this.size, this);

      this["delete"] = __bind(this["delete"], this);

      this._properties = {
        size: 40,
        eye: {
          left: 40,
          top: 40
        },
        pupil: {
          left: 0,
          top: 0
        }
      };
      that = this;
      this.item = $("<div class='eye'>");
      p = $("<div class='pupil'>");
      this.item.resizable({
        autoHide: true,
        aspectRatio: true,
        resize: function(event, ui) {
          return that.size(ui.size.width);
        },
        handles: "ne, se, sw, nw",
        stop: function(event, ui) {
          return googly_storage.save();
        }
      }).draggable({
        stack: '.eye',
        snapMode: 'inner',
        start: function() {
          return trash.show();
        },
        drag: function(event, ui) {
          var t_bord, _ref, _ref1;
          t_bord = trash.borders();
          if (((t_bord.top < (_ref = ui.position.top) && _ref < t_bord.bottom)) && ((t_bord.left < (_ref1 = ui.position.left) && _ref1 < t_bord.right))) {
            console.log("Delete?");
            return $(this).css("opacity", 0.6);
          } else {
            return $(this).css("opacity", 1);
          }
        },
        stop: function(event, ui) {
          var t_bord, _ref, _ref1, _ref2;
          t_bord = trash.borders();
          if (((t_bord.top < (_ref = ui.position.top) && _ref < t_bord.bottom)) && ((t_bord.left < (_ref1 = ui.position.left) && _ref1 < t_bord.right))) {
            that["delete"]();
          } else {
            _ref2 = ui.position, that._properties.eye.top = _ref2.top, that._properties.eye.left = _ref2.left;
          }
          trash.hide();
          return googly_storage.save();
        }
      }).click(function(e) {
        var esize;
        esize = $(this).outerWidth();
        return that.pupil(e.offsetX / esize, e.offsetY / esize);
      }).dblclick(function(e) {
        return googly_storage.add(new Eye($("body")));
      }).append(p).prependTo(this.parent);
      this.position(this._properties.eye.left, this._properties.eye.top).size(this._properties.size);
      console.log('added eye');
    }

    Eye.prototype["delete"] = function() {
      return console.log("Delete me!");
    };

    Eye.prototype.size = function(x, speed) {
      var borderWidth, that;
      if (speed == null) {
        speed = 0;
      }
      this._properties.size = x;
      that = this.item;
      borderWidth = 1 + x / 10;
      that.animate({
        "width": x,
        "height": x,
        "border-radius": x,
        "border-width": borderWidth,
        "margin": -x
      }, speed);
      that.children(".pupil").css("width", x * 2 / 3).css("height", x * 2 / 3).css("border-radius", x * 2 / 3);
      this.pupil(this._properties.pupil.left, this._properties.pupil.top, 0);
      /*that.children(".bounding-box")
      			.css("width", that.innerWidth() )
      			.css("height", that.innerWidth() )
      			.css("top", -borderWidth/2)
      			.css("left", -borderWidth/2)
      */

      return this;
    };

    Eye.prototype.position = function(left, top, speed) {
      var that, _ref;
      if (speed == null) {
        speed = 0;
      }
      _ref = [left, top], this._properties.eye.left = _ref[0], this._properties.eye.top = _ref[1];
      that = this.item;
      that.animate({
        "left": left,
        "top": top
      }, speed);
      return this;
    };

    Eye.prototype["export"] = function() {
      /* Return object representation of this eye's data
      */
      return this._properties;
    };

    Eye.prototype.pupil = function(left, top, speed) {
      var psizeDiff, that, _ref;
      if (speed == null) {
        speed = 300;
      }
      /* Pupil position
      		Takes a number from 0 to 1, referring 
      		to the left to right and top to bottom position
      		of the pupil
      */

      _ref = [left, top], this._properties.pupil.left = _ref[0], this._properties.pupil.top = _ref[1];
      that = this.item;
      psizeDiff = that.innerWidth() - that.children(".pupil").outerWidth();
      that.children(".pupil").animate({
        "margin-left": psizeDiff * left,
        "margin-top": psizeDiff * top
      }, speed);
      return this;
    };

    return Eye;

  })();

  /* Constancy functions
  */


  Storage = (function() {

    function Storage(list) {
      this.list = list != null ? list : [];
      this.key = window.location.href;
    }

    Storage.prototype.add = function(item) {
      return this.list.push(item);
    };

    Storage.prototype.save = function() {
      var data, eye;
      data = (function() {
        var _i, _len, _ref, _results;
        _ref = this.list;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          eye = _ref[_i];
          _results.push(eye["export"]());
        }
        return _results;
      }).call(this);
      return this.save_local(data);
    };

    Storage.prototype.save_local = function(data) {
      var str;
      str = JSON.stringify(data);
      localStorage.setItem(this.key, str);
      return console.log("Saved localStorage key for " + this.key + ":" + str);
    };

    Storage.prototype.load_local = function() {
      var str;
      str = localStorage.getItem(this.key);
      return JSON.parse(str);
    };

    Storage.prototype.load = function(eye_data) {
      var eye, t, _i, _len;
      if (eye_data == null) {
        eye_data = false;
      }
      if (!eye_data) {
        eye_data = this.load_local();
        console.log("Loaded localStorage key for " + this.key);
      }
      for (_i = 0, _len = eye_data.length; _i < _len; _i++) {
        eye = eye_data[_i];
        console.log(eye);
        t = new Eye($("body"));
        t.size(eye.size).position(eye.eye.left, eye.eye.top).pupil(eye.pupil.left, eye.pupil.top, 0);
        this.add(t);
      }
    };

    Storage.prototype["delete"] = function() {};

    return Storage;

  })();

  $(function() {
    var a, storage;
    trash.draw();
    window.googly_storage = new Storage;
    storage = googly_storage;
    a = [
      {
        size: 60,
        eye: {
          zIndex: 3,
          left: 334,
          top: 156
        },
        pupil: {
          left: 1,
          top: 1
        }
      }, {
        size: 30,
        eye: {
          zIndex: 3,
          left: 30,
          top: 60
        },
        pupil: {
          left: 0.5,
          top: 0
        }
      }
    ];
    storage.load();
    return console.log(storage.list);
  });

}).call(this);
