// Generated by CoffeeScript 1.4.0
(function() {
  var $, Eye, Storage, Trash, trash;

  $ = jQuery;

  /* Create Trash
  */


  Trash = (function() {

    function Trash() {}

    Trash.prototype.draw = function() {
      return $("<div class='trash'>").html("This is the trash").hide().prependTo("body");
    };

    Trash.prototype.show = function() {
      return $(".trash").slideDown("fast");
    };

    Trash.prototype.hide = function() {
      return $(".trash").slideUp();
    };

    Trash.prototype["delete"] = function() {};

    return Trash;

  })();

  trash = new Trash;

  /* Create Eyeball
  */


  Eye = (function() {

    function Eye(parent) {
      var p, that;
      this.parent = parent;
      that = this;
      this.item = $("<div class='eye'>");
      p = $("<div class='pupil'>");
      this.item.draggable({
        stack: '.eye',
        snap: '.trash',
        snapMode: 'inner',
        start: function() {
          return trash.show();
        },
        stop: function() {
          return trash.hide();
        }
      }).click(function(e) {
        var esize;
        esize = $(this).outerWidth();
        return that.pupil(e.offsetX / esize, e.offsetY / esize);
      }).dblclick(function(e) {
        return googly_storage.add(new Eye($("body")));
      }).append(p).prependTo(this.parent);
      console.log('added eye');
    }

    Eye.prototype.size = function(x) {
      var that;
      that = this.item;
      that.css("width", x).css("height", x).css("border-radius", x).css("border-width", 1 + x / 10);
      return that.children(".pupil").css("width", x / 2).css("height", x / 2).css("border-radius", x / 2);
    };

    Eye.prototype.position = function(left, top) {
      var that;
      that = this.item;
      return that.css("left", left).css("top", top);
    };

    Eye.prototype["export"] = function() {
      /* Return object representation of this eye's data
      */

      var a, eye, pupil;
      eye = this.item;
      pupil = eye.children(".pupil");
      a = {
        size: eye.width(),
        eye: {
          left: eye.css("left"),
          top: eye.css("top")
        },
        pupil: {
          left: pupil.css("margin-left"),
          top: pupil.css("margin-top")
        }
      };
      return a;
    };

    Eye.prototype.pupil = function(left, top, speed) {
      var psizeDiff, that;
      if (speed == null) {
        speed = 300;
      }
      /* Takes a number from 0 to 1, referring 
      		to the left to right and top to bottom position
      		of the pupil
      */

      that = this.item;
      psizeDiff = that.innerWidth() - that.children(".pupil").outerWidth();
      return that.children(".pupil").animate({
        "margin-left": psizeDiff * left,
        "margin-top": psizeDiff * top
      }, speed);
      /*
      		that.children(".pupil")
      			.css("margin-left", left)
      			.css("margin-top", top)
      */

    };

    return Eye;

  })();

  /* Constancy functions
  */


  Storage = (function() {

    function Storage(list) {
      this.list = list != null ? list : [];
    }

    Storage.prototype.add = function(item) {
      return this.list.push(item);
    };

    Storage.prototype.save = function() {
      var eye;
      return console.log((function() {
        var _i, _len, _ref, _results;
        _ref = this.list;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          eye = _ref[_i];
          _results.push(eye["export"]());
        }
        return _results;
      }).call(this));
    };

    Storage.prototype.load = function(eye_data) {
      var eye, t, _i, _len;
      for (_i = 0, _len = eye_data.length; _i < _len; _i++) {
        eye = eye_data[_i];
        console.log(eye);
        t = new Eye($("body"));
        t.size(eye.size);
        t.position(eye.eye.left, eye.eye.top);
        t.pupil(eye.pupil.left, eye.pupil.top, 0);
        this.add(t);
      }
    };

    Storage.prototype["delete"] = function() {};

    return Storage;

  })();

  $(function() {
    var a, storage;
    trash.draw();
    window.googly_storage = new Storage;
    storage = googly_storage;
    storage.add(new Eye($("body")));
    a = [
      {
        size: 60,
        eye: {
          zIndex: 3,
          left: 334,
          top: 156
        },
        pupil: {
          left: 1,
          top: 1
        }
      }, {
        size: 30,
        eye: {
          zIndex: 3,
          left: 30,
          top: 0
        },
        pupil: {
          left: 0.5,
          top: 0
        }
      }
    ];
    storage.load(a);
    console.log(storage.list);
    return storage.save();
  });

}).call(this);
